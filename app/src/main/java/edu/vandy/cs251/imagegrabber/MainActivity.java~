package edu.vandy.cs251.imagegrabber;

import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.webkit.URLUtil;
import android.widget.Button;
import android.widget.EditText;
import java.util.ArrayList;
import java.util.List;
/**
 * This is the activity that gets displayed when the user launches
 * this app for the first time
 * @author Upendra Dhakal
 * 10/14/2015
 */
public class MainActivity extends AppCompatActivity {

    /**
     * Tag used to display the logs in the LOGCAT
     */
    private static String TAG = MainActivity.class.getSimpleName();

    /**
     * User's URL to download the image form
     */
    private EditText mImageUrlEditTextView;

    /**
     * Button that starts the download in the background
     */
    private Button mDownloadBtn;

    /**
     * Recycler view where the downloaded images are presented
     */
    private RecyclerView mImageRecyclerView;

    /**
     * List of the currently downloaded images
     */
    private List<Image> mImageList = new ArrayList<>();

    /**
     * Adapter that populates the list of images to the recycler view
     */
    private ImageAdapter mImageAdapter;

    /**
     * The database Helper class which can be used to store the image
     * to the database and retrieve the data form this database
     */
    private DBHelper mDBHelper;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        findAllViews();
        mDBHelper = new DBHelper(this);
        initializeRecyclerView();
        updateDownloads();
        mDownloadBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mImageUrlEditTextView.clearFocus();  // this removes the focus from the edit text
                downloadImage();
            }
        });
    }

    /**
     * Prepares the recycler view to display the lists of images.
     */
    public void initializeRecyclerView(){
        LinearLayoutManager llm = new LinearLayoutManager(this);
        // show images downloaded recently to the top
        llm.setReverseLayout(true);
        llm.setStackFromEnd(true);
        mImageRecyclerView.setLayoutManager(llm);
        mImageAdapter = new ImageAdapter(this, mImageList);
        mImageRecyclerView.setAdapter(mImageAdapter);
    }

    /**
     * This method finds all the views in the activity and initializes them
     */
    private void findAllViews(){
        mDownloadBtn = (Button) findViewById(R.id.downloadBtn);
        mImageRecyclerView = (RecyclerView) findViewById(R.id.downloadedImagesRecyclerView);
        mImageUrlEditTextView = (EditText) findViewById(R.id.imageUrlTextView);
    }

    /**
     * This is the function that gets triggred when the user clicks the
     * download button.
     * This method actually executes the DownloadImageTask
     */
    private void downloadImage() {
        String url = mImageUrlEditTextView.getText().toString();
        if (isValidInput(url)) {
            Intent i = new Intent(this, DownloadActivity.class);
            i.putExtra(DownloadActivity.IMAGE_URL_EXTRA_TAG, url);
            startActivityForResult(i, Constants.DOWNLOAD_IMAGE_REQUEST);
        } else {
            DebugUtils.showToast(this, "Please enter a valid URL");
        }
    }

    /**
     * This method checks if the url provided is actually a valid url
     * @param url User's selection of the image url
     * @return True if the url is valid, false other wise
     */
    private boolean isValidInput(String url){
        return (!url.isEmpty() &&  URLUtil.isValidUrl(url));
    }

    /**
     * This method shows the images downloaded by user in previous
     * use of the application
     */
    private void updateDownloads(){
        Cursor crs = mDBHelper.getAll();
        if (crs .moveToFirst()) {
            while (!crs.isAfterLast()) {
                String uriName = crs.getString(crs
                        .getColumnIndex(Contract.ImageEntry.COLUMN_NAME_URI));
                long downLoadTime = crs.getLong(crs.getColumnIndex(Contract.ImageEntry.COLUMN_NAME_DOWNLOAD_TIME));
                mImageList.add(new Image(uriName, downLoadTime));
                crs.moveToNext();
            }
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.action_settings){
            //startActivity(new Intent(this, SettingsActivity.class));
        }
        return super.onOptionsItemSelected(item);
    }


    /**
     * This is the method that is executed when the activity recives the data about the downlaod
     * image form the Download Activity
     * @param requestCode The code that indicates if the a
     * @param resultCode
     * @param data The image that was downloaded by the download activity
     */
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == Constants.DOWNLOAD_IMAGE_REQUEST) {
            Log.e(TAG, "Image recieved form download activity successfully!");
            DebugUtils.showToast(MainActivity.this, "Image downloaded successfully!");
            // get the image form the DownloadActivity
            Image downloadedImage = (Image) data.getSerializableExtra(Constants.IMAGE_PUT_EXTRA_TAG);
            saveImageInDatabase(downloadedImage);       // put the image to the database
            showInTheList(downloadedImage);  // display the downloaded image
        }
    }

    /**
     * This function adds the downloaded image to the image list
      * @param image The image to be shown in the image list
     */
    private void showInTheList(Image image){
        mImageList.add(image);
        mImageRecyclerView.getAdapter().notifyDataSetChanged();
    }

    /**
     * This is the function that inserts downloaded image to the database
     * @param downloadedImage The image to be inserted to the database
     */
    private void saveImageInDatabase(Image downloadedImage){
        mDBHelper.insertImage(downloadedImage);
    }

    /**
     * Resets the form after the image is downloaded successfully
     */
    private void resetForm(){
        mImageUrlEditTextView.setText("");
    }
}
